/**********************************************************************
 * TDRP params for NcarAcPosn2Spdb
 **********************************************************************/

//======================================================================
//
// NcarAcPosn2Spdb reads aircraft position data from ASCII file in JSON 
//   format. These files updated frequently and are overwritten. They are 
//   read each time they update, and the position data is then stored in 
//   SPDB.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "mobile";

///////////// mode ////////////////////////////////////
//
// Operating mode.
//
// 	REALTIME_JSON: JSON files are read and processed as they update.
// 	SIM: aircraft data is generated for simulation putposes.
//
//
// Type: enum
// Options:
//     REALTIME_JSON
//     SIM
//

mode = REALTIME_JSON;

//======================================================================
//
// REALTIME JSON MODE.
//
//======================================================================
 
///////////// aircraft_json ///////////////////////////
//
// Details of JSON files for each aircraft in realtime mode.
//
// The JSON files update every few seconds. We watch the files and 
//   reread them when they change, storing the data in SPDB using the 
//   callsign as the data_type.
//
//
// Type: struct
//   typedef struct {
//      string callsign;
//      string input_path;
//   }
//
// 1D array - variable length.
//

aircraft_json = {
  {
    callsign = "PRB1",
    input_path = "/net/web/catalog/html/positions/cswr_probe1.json"
  }
  ,
  {
    callsign = "PRB2",
    input_path = "/net/web/catalog/html/positions/cswr_probe2.json"
  }
  ,
  {
    callsign = "DOW6",
    input_path = "/net/web/catalog/html/positions/dow6.json"
  }
  ,
  {
    callsign = "DOW7",
    input_path = "/net/web/catalog/html/positions/dow7.json"
  }
  ,
  {
    callsign = "DOW8",
    input_path = "/net/web/catalog/html/positions/dow8.json"
  }
  ,
  {
    callsign = "MP1",
    input_path = "/net/web/catalog/html/positions/mp1_clamps.json"
  }
  ,
  {
    callsign = "MP2",
    input_path = "/net/web/catalog/html/positions/mp2_mips.json"
  }
  ,
  {
    callsign = "MP3",
    input_path = "/net/web/catalog/html/positions/mp3_sparc.json"
  }
  ,
  {
    callsign = "MP4",
    input_path = "/net/web/catalog/html/positions/mp4_mgaus.json"
  }
  ,
  {
    callsign = "NOXP",
    input_path = "/net/web/catalog/html/positions/noxp.json"
  }
  ,
  {
    callsign = "RAXP",
    input_path = "/net/web/catalog/html/positions/raxpol.json"
  }
  ,
  {
    callsign = "MS1",
    input_path = "/net/web/catalog/html/positions/nssl_mg1.json"
  }
  ,
  {
    callsign = "MS2",
    input_path = "/net/web/catalog/html/positions/nssl_mg2.json"
  }
  ,
  {
    callsign = "MS3",
    input_path = "/net/web/catalog/html/positions/csu_sonde.json"
  }
  ,
  {
    callsign = "MS4",
    input_path = "/net/web/catalog/html/positions/nssl_sonde_ncsu.json"
  }
  ,
  {
    callsign = "MM1",
    input_path = "/net/web/catalog/html/positions/nssl_mm.json"
  }
  ,
  {
    callsign = "MM2",
    input_path = "/net/web/catalog/html/positions/nssl_mm2.json"
  }
  ,
  {
    callsign = "SR1",
    input_path = "/net/web/catalog/html/positions/smart-r1.json"
  }
  ,
  {
    callsign = "SR2",
    input_path = "/net/web/catalog/html/positions/smart-r2.json"
  }
  ,
  {
    callsign = "WOLF",
    input_path = "/net/web/catalog/html/positions/t-wolf.json"
  }
};

///////////// repeat_location_if_no_change ////////////
//
// Repeat the last location at regular intervals if it does not change.
//
// This can be used with mobile ground assets that stop reporting when 
//   then are stationary. See 'repeat_period_secs'.
//
//
// Type: boolean
//

repeat_location_if_no_change = TRUE;

///////////// repeat_period_secs //////////////////////
//
// Period at which to repeat the location if the position has not been 
//   updated (secs).
//
// See 'repeat_location_if_no_change'.
//
//
// Type: int
//

repeat_period_secs = 900;

///////////// repeat_max_age_secs /////////////////////
//
// Age at which we no longer repeat the data (secs).
//
// If the input file exceeds this age, the data is no longer repeated.
//
//
// Type: int
//

repeat_max_age_secs = 43200;

//======================================================================
//
// SIMULATION MODE.
//
//======================================================================
 
///////////// sim_aircraft ////////////////////////////
//
// Details of aircraft for SIM mode.
//
// The test aircraft have a starting location, speed (knots) and 
//   altitude (ft). They wander randomly around. If they go further that 
//   100 km from their starting location they are brought back to the 
//   start.
//
//
// Type: struct
//   typedef struct {
//      string callsign;
//      double start_lat;
//      double start_lon;
//      double altitude;
//      double speed;
//   }
//
// 1D array - variable length.
//

sim_aircraft = {
  {
    callsign = "JRA",
    start_lat = -27.43,
    start_lon = 28.87,
    altitude = 9500,
    speed = 150
  }
  ,
  {
    callsign = "JRB",
    start_lat = -28.57,
    start_lon = 28.86,
    altitude = 10500,
    speed = 250
  }
  ,
  {
    callsign = "CAN",
    start_lat = -28.19,
    start_lon = 27.76,
    altitude = 11500,
    speed = 150
  }
};

//======================================================================
//
// DATA QUALITY.
//
//======================================================================
 
///////////// change_lat_sign /////////////////////////
//
// Change the latitude sign.
//
// Use if southern latitudes are positive.
//
//
// Type: boolean
//

change_lat_sign = FALSE;

///////////// change_lon_sign /////////////////////////
//
// Change the longitude sign.
//
// Use if western longitudes are positive.
//
//
// Type: boolean
//

change_lon_sign = FALSE;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_url //////////////////////////////
//
// Output SPDB URL.
//
// This is the path to the output data directory. You can use full URL 
//   sytnax and optionally put the data to a remote machine.
//
//
// Type: string
//

output_url = "$(DATA_DIR)/$(project)/spdb/mobile_posn";

///////////// valid_period ////////////////////////////
//
// Valid period (secs).
//
// Time period over which the aircraft position is considered valid.
//
// Minimum val: 1
//
// Type: int
//

valid_period = 900;

