/**********************************************************************
 * TDRP params for madis2Spdb
 **********************************************************************/

//======================================================================
//
// This is a small ingester for the netCDF formatted MADIS surface 
//   station data. Not all the fields are decoded, but the major ones are 
//   (precip type is not). The station IDs seem to be up to six characters 
//   in length, so a non- standard hashing is used to get the dataType.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
// Type: boolean
//

debug = TRUE;

///////////// verbose /////////////////////////////////
//
// Verbose debug option.
// If set, verbose debug messages will be printed appropriately.
// Type: boolean
//

verbose = FALSE;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "hawaii";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operation mode.
// Program may be run in two modes, archive and realtime. In realtime 
//   mode, the conversion is performed for each input file as it becomes 
//   available. In archive mode, the file list is obtained from the 
//   command line.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//

mode = REALTIME;

///////////// InDir ///////////////////////////////////
//
// Input directory.
// Directory path for input data files.
// Type: string
//

InDir = "$(DATA_DIR)/eolbase/raw/madis/mesonet1";

///////////// latest_data_info_avail //////////////////
//
// _latest_data_info file exists in InDir.
// If true, the _latest_data_info file will be monitored for new data. 
//   If false, InDir will be scanned for new files.
// Type: boolean
//

latest_data_info_avail = TRUE;

///////////// max_realtime_valid_age //////////////////
//
// Max age of input data.
// For realtime only - max age of input data for it to be valid.
// Type: int
//

max_realtime_valid_age = 7200;

///////////// inputDataCompressed /////////////////////
//
// Option to uncompress input data.
// Use this if inpu data are gzipped.
// Type: boolean
//

inputDataCompressed = FALSE;

///////////// fileExtension ///////////////////////////
//
// Input file extension.
// If string is NULL, all extensions are valid.
// Type: string
//

fileExtension = "";

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_url //////////////////////////////
//
// Output url, of form spdbp:://host.domain:[port]:dir/dir .
// Data are written here.
// Type: string
//

output_url = "spdbp:://localhost::hawaii/spdb/madis";

///////////// output_to_provider_subdirs //////////////
//
// Flag indicating that the output should be divided based on provider.
// If true, the output will be put in subdirectories of the output_url. 
//   These subdirectories will be named using the provider name.
// Type: boolean
//

output_to_provider_subdirs = FALSE;

///////////// outputDataCompressed ////////////////////
//
// Option to compress input data when finished with it.
// netCDF data tend to compress well.
// Type: boolean
//

outputDataCompressed = FALSE;

///////////// Expiry //////////////////////////////////
//
// How long the data are valid, seconds.
// Depends on input frequency. Given that these data can come in very 
//   quickly, having them age off a display system equally quickly can 
//   avoid a lot of clutter.
// Type: long
//

Expiry = 900;

//======================================================================
//
// ALGORITHM PARAMETERS.
//
//======================================================================
 
///////////// applyLatLonLimits ///////////////////////
//
// Option to apply lat/lon limits.
// May help reduce data volume.
// Type: boolean
//

applyLatLonLimits = TRUE;

///////////// latLonLimits ////////////////////////////
//
// Lat/lon limits.
// Relevant only if applyLatLonLimits is TRUE.
//
// Type: struct
//   typedef struct {
//      double minLat;
//      double minLon;
//      double maxLat;
//      double maxLon;
//   }
//
//

// FRONT

// latLonLimits = {
//     minLat = 35,
//     minLon = -110,
//     maxLat = 45,
//     maxLon = -98
// };

// PECAN

latLonLimits = {
    minLat = 0,
    minLon = -180,
    maxLat = 50,
    maxLon = -120
};

///////////// applyDataProviderLimits /////////////////
//
// Option to only accept certain data providers.
// May help reduce data volume.
// Type: boolean
//

applyDataProviderLimits = FALSE;

///////////// dataProviders ///////////////////////////
//
// List of data providers to accept. These are printed if the program is 
//   run in debug mode, which may be a good way to ascertain what the 
//   strings are set to.
// Only relevant if applyDataProviderLimits is TRUE.
// Type: string
// 1D array - variable length.
//

dataProviders = {
 "UDFCD",
 "LSU-JSU",
 "WT-Meso",
 "FL-Meso",
 "WXforYou",
 "APRSWXNET",
 "OK-Meso",
 "MesoWest",
 "IEM",
 "RAWS",
 "WT-Meso"
};

//======================================================================
//
// NETCDF FILE DESCRIPTION.
//
//======================================================================
 
///////////// latitude_var ////////////////////////////
//
// Information about the latitude variable in the netCDF file. This 
//   variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

latitude_var = {
    var_name = "latitude",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// longitude_var ///////////////////////////
//
// Information about the longitude variable in the netCDF file. This 
//   variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

longitude_var = {
    var_name = "longitude",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// elevation_var ///////////////////////////
//
// Information about the elevation variable in the netCDF file. This 
//   variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

elevation_var = {
    var_name = "elevation",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// obs_time_var ////////////////////////////
//
// Information about the observation time variable in the netCDF file. 
//   This variable must be stored as doubles in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

obs_time_var = {
    var_name = "observationTime",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// temperature_var /////////////////////////
//
// Information about the temperature variable in the netCDF file. This 
//   variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file. Set to an empty string if there is no temperature variable in 
//   the netCDF file.
// 	qc_var_name - The associated QC variable name exactly as it appears 
//   in the netCDF file. The data for this variable is set to missing 
//   anywhere the QC variable value is non-zero.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
// Note that the temperature variable is assumed to be stored in kelvins 
//   in the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string qc_var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

temperature_var = {
    var_name = "temperature",
    qc_var_name = "temperatureQCR",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// dewpoint_var ////////////////////////////
//
// Information about the dewpoint variable in the netCDF file. This 
//   variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file. Set to an empty string if there is no temperature variable in 
//   the netCDF file.
// 	qc_var_name - The associated QC variable name exactly as it appears 
//   in the netCDF file.
// The data for this variable is set to missing anywhere the QC variable 
//   value is non-zero.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
// Note that the dewpoint variable is assumed to be stored in kelvins in 
//   the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string qc_var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

dewpoint_var = {
    var_name = "dewpoint",
    qc_var_name = "dewpointQCR",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// rh_var //////////////////////////////////
//
// Information about the relative humidity variable in the netCDF file. 
//   This variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file. Set to an empty string if there is no temperature variable in 
//   the netCDF file.
// 	qc_var_name - The associated QC variable name exactly as it appears 
//   in the netCDF file.
// The data for this variable is set to missing anywhere the QC variable 
//   value is non-zero.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
// Note that the relative humidity variable is assumed to be stored in 
//   percent (0-100) in the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string qc_var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

rh_var = {
    var_name = "relHumidity",
    qc_var_name = "relHumidityQCR",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// station_pressure_var ////////////////////
//
// Information about the station pressure variable in the netCDF file. 
//   This variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file. Set to an empty string if there is no temperature variable in 
//   the netCDF file.
// 	qc_var_name - The associated QC variable name exactly as it appears 
//   in the netCDF file.
// The data for this variable is set to missing anywhere the QC variable 
//   value is non-zero.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
// Note that the station pressure variable is assumed to be stored in 
//   pascals in the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string qc_var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

station_pressure_var = {
    var_name = "stationPressure",
    qc_var_name = "stationPressureQCR",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// sea_level_pressure_var //////////////////
//
// Information about the sea level pressure variable in the netCDF file. 
//   This variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file. Set to an empty string if there is no temperature variable in 
//   the netCDF file.
// 	qc_var_name - The associated QC variable name exactly as it appears 
//   in the netCDF file.
// 	fill_value_name - The name of the attribute that gives the The data 
//   for this variable is set to missing anywhere the QC variable value is 
//   non-zero.
// fill value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
// Note that the sea level pressure variable is assumed to be stored in 
//   pascals in the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string qc_var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

sea_level_pressure_var = {
    var_name = "seaLevelPressure",
    qc_var_name = "seaLevelPressureQCR",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// altimeter_var ///////////////////////////
//
// Information about the altimeter variable in the netCDF file. This 
//   variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file. Set to an empty string if there is no temperature variable in 
//   the netCDF file.
// 	qc_var_name - The associated QC variable name exactly as it appears 
//   in the netCDF file.
// The data for this variable is set to missing anywhere the QC variable 
//   value is non-zero.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
// Note that the altimeter variable is assumed to be stored in pascals 
//   in the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string qc_var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

altimeter_var = {
    var_name = "altimeter",
    qc_var_name = "altimeterQCR",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// wind_dir_var ////////////////////////////
//
// Information about the wind direction variable in the netCDF file. 
//   This variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file. Set to an empty string if there is no temperature variable in 
//   the netCDF file.
// 	qc_var_name - The associated QC variable name exactly as it appears 
//   in the netCDF file.
// The data for this variable is set to missing anywhere the QC variable 
//   value is non-zero.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
// Note that the wind direction variable is assumed to be stored in 
//   degrees indicating the direction the wind is from  in the netCDF 
//   file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string qc_var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

wind_dir_var = {
    var_name = "windDir",
    qc_var_name = "windDirQCR",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// wind_speed_var //////////////////////////
//
// Information about the wind speed variable in the netCDF file. This 
//   variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file. Set to an empty string if there is no temperature variable in 
//   the netCDF file.
// 	qc_var_name - The associated QC variable name exactly as it appears 
//   in the netCDF file.
// The data for this variable is set to missing anywhere the QC variable 
//   value is non-zero.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
// Note that the wind speed variable is assumed to be stored in m/s in 
//   the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string qc_var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

wind_speed_var = {
    var_name = "windSpeed",
    qc_var_name = "windSpeedQCR",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// wind_gust_var ///////////////////////////
//
// Information about the wind gust variable in the netCDF file. This 
//   variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file. Set to an empty string if there is no temperature variable in 
//   the netCDF file.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
// Note that the wind gust variable is assumed to be stored in m/s in 
//   the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

wind_gust_var = {
    var_name = "windGust",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// visibility_var //////////////////////////
//
// Information about the visibility variable in the netCDF file. This 
//   variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file. Set to an empty string if there is no temperature variable in 
//   the netCDF file.
// 	qc_var_name - The associated QC variable name exactly as it appears 
//   in the netCDF file.
// The data for this variable is set to missing anywhere the QC variable 
//   value is non-zero.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
// Note that the visibility variable is assumed to be stored in meters 
//   in the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string qc_var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

visibility_var = {
    var_name = "visibility",
    qc_var_name = "visibilityQCR",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// precip_rate_var /////////////////////////
//
// Information about the precip rate variable in the netCDF file. This 
//   variable must be stored as floats in the netCDF file.
// 	var_name - The variable name exactly as it appears in the netCDF 
//   file. Set to an empty string if there is no temperature variable in 
//   the netCDF file.
// 	qc_var_name - The associated QC variable name exactly as it appears 
//   in the netCDF file.
// The data for this variable is set to missing anywhere the QC variable 
//   value is non-zero.
// 	fill_value_name - The name of the attribute that gives the fill 
//   value used for this variable in the netCDF file.
// 	missing_value_name - The name of the attribute that gives the 
//   missing value used for this variable in the netCDF file.
// Note that the precip rate variable is assumed to be stored in m/s in 
//   the netCDF file.
//
// Type: struct
//   typedef struct {
//      string var_name;
//      string qc_var_name;
//      string fill_value_name;
//      string missing_value_name;
//   }
//
//

precip_rate_var = {
    var_name = "precipRate",
    qc_var_name = "precipRateQCR",
    fill_value_name = "_FillValue",
    missing_value_name = "missing_value"
};

///////////// takeFilenameDate ////////////////////////
//
// Option to try to take date (not time) from filename.
// This is needed for some simulations. It is the default,
// because it should be the realtime behavior anyway. If
// this is TRUE then the program will check if the input
// file is named YYYYMMDD_HHMM, ie. 20100911_0830 - if
// so, the year, month and day from the filename will
// be used and the hour, minute and second from the
// data will be used. If this is FALSE, and/or the filename
// does not follow naming convention, the data time is used.
// Type: boolean
//

takeFilenameDate = TRUE;

